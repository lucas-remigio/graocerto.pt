name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: frontend
            image_name: frontend
            context: ./frontend
          - service: backend
            image_name: app
            context: ./backend
          - service: websockets
            image_name: websockets
            context: ./sockets
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Images
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }} 
          file: ${{ matrix.context }}/Dockerfile
          push: true
          tags: |
            lucasremigio/${{ matrix.image_name }}:${{ github.sha }}
            lucasremigio/${{ matrix.image_name }}:latest
          cache-from: type=registry,ref=lucasremigio/${{ matrix.image_name }}:buildcache
          cache-to: type=registry,ref=lucasremigio/${{ matrix.image_name }}:buildcache,mode=max
          build-args: |
            ${{ matrix.service == 'frontend' && format('BACKEND_URL={0}', vars.BACKEND_URL) || '' }}
            ${{ matrix.service == 'frontend' && format('SOCKETS_URL={0}', vars.SOCKETS_URL) || '' }}
            ${{ matrix.service == 'frontend' && format('BACKEND_PORT={0}', vars.BACKEND_PORT) || '' }}
            ${{ matrix.service == 'frontend' && format('SOCKETS_PORT={0}', vars.SOCKETS_PORT) || '' }}
            ${{ matrix.service == 'frontend' && 'IS_PRODUCTION=true' || '' }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Copy docker-compose file to VPS
        run: scp -o StrictHostKeyChecking=no docker-compose.prod.yaml ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/docker-compose.prod.yaml

      - name: Deploy to VPS
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            # Create .env file with all variables
            cat > .env << EOL
            TAG=${{ github.sha }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_USER=${{ secrets.DB_USER }}
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            REMOTE_DB_URL=${{ secrets.REMOTE_DB_URL }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXPIRATION_IN_SECONDS=${{ secrets.JWT_EXPIRATION_IN_SECONDS }}
            FRONTEND_URL=${{ vars.FRONTEND_URL }}
            FRONTEND_DOMAIN=${{ vars.FRONTEND_DOMAIN }}
            BACKEND_URL=${{ vars.BACKEND_URL }}
            BACKEND_PORT=${{ vars.BACKEND_PORT }}
            SOCKETS_URL=${{ vars.SOCKETS_URL }}
            SOCKETS_PORT=${{ vars.SOCKETS_PORT }}
            EOL

            # Pull images in parallel
            docker pull lucasremigio/frontend:${{ github.sha }} &
            docker pull lucasremigio/app:${{ github.sha }} &
            docker pull lucasremigio/websockets:${{ github.sha }} &
            wait

            # Deploy with minimal downtime
            docker compose -f docker-compose.prod.yaml up -d --force-recreate
            
            # Clean up old images (keep last 3 versions)
            docker image prune -a -f
          EOF
